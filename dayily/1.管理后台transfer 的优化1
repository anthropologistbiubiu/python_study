redis streams消息队列


使用方法分类与总结：


1. stream 消息管理  

1.1 添加消息 xadd mystream * name lisi age 18

1.2 删除消息 xdel mystream 1701334237739-0

1.3 限制消息数量  xtrim mystream maxlen 2

1.4 范围读取消息  xrange mystream - +

1.5 查看消息数量 xlen mystream

1.6 查看stream 信息 xinfo stream mystream

1.7 确认消费组已经消费的消息  XACK key groupname ID [ID ...] 

xack mystream mygroup 1701334425955-0

1.8  xpending mystream  mygroup - + 1 myconsumer 查看还未确认的消息

1.9 XREAD STREAMS key ID [ID ...] [COUNT count] [BLOCK milliseconds]

xread streams mystream 1701334432221-0

从指定的流中指定的消息ID开始消费消息


2.消费组管理

2.1 创建消费组 xgroup create mystream mygroup 0 （起始消息的ID) xgroup create mystream mygroup 0

2.2 销毁指定的消费者组  XGROUP DESTROY key groupname

2.3 从消费组中消费消息  xreadgroup group mygroup myconsumer count 1 streams mystream >

XREADGROUP GROUP groupname consumername STREAMS key ID [COUNT count] [BLOCK milliseconds] [NOACK]

从消费者组中读取消息。

2.4 从消费者组中删除指定的消费者      

2.5 查看 消费组中未处理消息的相关信息  xpending mystream mygroup 

2.6 删除指定消费者   XGROUP DELCONSUMER key groupname consumername   从消费者组中删除指定的消费者。



XREADGROUP有几个特点：

消费者在第一次被提及时自动创建，无需显式创建。

可以同时读取多个key，但是要使其正常工作，需要在每个Stream中创建一个具有相同名称的消费者组。

XREADGROUP 是写命令，因为即使从Stream中读取，消费者组也会修改last_delivered_id，因此只能在主实例上调用。



3.消费者管理

1.获取待处理消息的信息。   xpending mystream  mygroup - + 1 myconsumer 获取某个消费者待处理消息的信息

经过数据确认之后，现在获得的就是 


r-wz9we12k4ru7majvp7.redis.rds.aliyuncs.com:6379> xpending mystream  mygroup - + 10 myconsumer
(empty list or set)




stream 和发布与订阅，与list 的优缺点在使用场景上的比较。


1.list 的使用常见和特点：

2.pub/sub 的使用常见和特点：

3.stream 的使用场景和特点：



xread 消费消息和xreadgroup 消费消息有什么区别


XREAD:
单一消费者： XREAD 是用于单一消费者的命令。一个消费者执行 XREAD 命令可以读取消息，但这不会涉及到消费者组的概念。

不支持消费者组： XREAD 不涉及消费者组的概念，因此它适用于独立的、不需要消息分发的消费者。

XREADGROUP:
消费者组： XREADGROUP 是用于支持多个消费者的命令，通过使用消费者组的概念。多个消费者可以在同一消费者组中协同工作。

消息分配： 在消费者组中，消息会被自动分配给不同的消费者。每条消息只会被消费者组中的一个消费者处理。

支持确认机制： XREADGROUP 支持消息确认机制，允许消费者确认已处理的消息，从而确保不同消费者之间不会重复处理相同的消息。


eg :

XREAD STREAMS mystream $ 从

这个命令表示从当前最新的消息开始读取 mystream 的所有消息，适用于单一消费者。

XREADGROUP GROUP mygroup myconsumer STREAMS mystream $

这个命令表示在消费者组 mygroup 中的消费者 myconsumer 读取 mystream 的消息。在消费者组中，消息会自动分配给不同的消费者，并且可以使用 XACK 命令来确认已处理的消息。



List:


FIFO 队列： List 是一个有序的数据结构，元素按照插入的顺序排列，因此可以用作先进先出 (FIFO) 的队列。

阻塞操作： BLPOP 和 BRPOP 可以用于阻塞地从 List 中弹出元素，如果 List 为空，它们会等待直到有元素可用。

不支持广播： List 不支持广播消息给多个订阅者，每个消息只能被一个消费者处理。



发布与订阅 (Pub/Sub):
异同点：
广播： Pub/Sub 用于广播消息，发布者将消息发送到通道，所有订阅该通道的订阅者都会接收到消息。这是一对多的消息传递方式。

无状态： 没有持久化的能力，订阅者只能接收到在其订阅期间发布的消息。

不支持消息队列的 FIFO 语义： 无法保证消息的顺序，也无法确保每个订阅者都接收到相同的消息。


Stream:
异同点：
有序消息： Stream 是用于处理有序消息的数据结构，支持按照时间戳排序的消息。

消息的持久性： Stream 具有更好的消息持久性，支持持久化存储，因此可以保存较长时间范围内的消息。

支持多个消费者： 通过消费者组，Stream 允许多个消费者以协同的方式处理消息。

支持确认机制： 消费者可以使用 XACK 命令确认已处理的消息，以确保不同消费者之间不会重复处理相同的消息。

选择适当的数据结构：
使用 List 当你需要简单的 FIFO 队列，并且消息的顺序很重要。

使用 Pub/Sub 当你需要广播消息给多个订阅者，且消息的顺序和持久性不是关键。

使用 Stream 当你需要有序的、持久性的消息，同时可能有多个消费者协同处理消息。



redis 的哨兵机制，redis 的持久化，主从复制，redis 事务机制。缓存一致性问题。缓存穿透，缓存雪崩，缓存击穿。


redis 整理哨兵，持久化，事务，主从同步，集群。缓存一致性，缓存雪崩，缓存击穿。 

整理分布式锁，整理消息队列，整理布隆过滤器。整理滑动窗口限流。

redis 底层的数据结构的整理。